name: Comprehensive Testing Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

permissions:
  contents: read
  pages: write
  id-token: write

jobs:
  backend-tests:
    name: Backend Tests
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install uv
      run: pip install uv

    - name: Install Python dependencies
      run: |
        uv venv
        source .venv/bin/activate
        uv pip install -e ".[dev]"

    - name: Run backend unit tests
      run: |
        source .venv/bin/activate
        DJANGO_SETTINGS_MODULE=config.settings.test pytest backend/tests/test_exercises/ -v --cov=backend --cov-report=xml --cov-report=term-missing

    - name: Run backend API tests
      run: |
        source .venv/bin/activate
        DJANGO_SETTINGS_MODULE=config.settings.test pytest backend/tests/test_api/ -v --cov=backend --cov-append --cov-report=xml --cov-report=term-missing

    - name: Run backend audio tests
      run: |
        source .venv/bin/activate
        DJANGO_SETTINGS_MODULE=config.settings.test pytest backend/tests/test_audio/ -v --cov=backend --cov-append --cov-report=xml --cov-report=term-missing

    - name: Run backend structure tests
      run: |
        source .venv/bin/activate
        DJANGO_SETTINGS_MODULE=config.settings.test pytest backend/tests/test_structure/ -v --cov=backend --cov-append --cov-report=xml --cov-report=term-missing

    - name: Run backend integration tests
      run: |
        source .venv/bin/activate
        DJANGO_SETTINGS_MODULE=config.settings.test pytest backend/tests/integration/ -v --cov=backend --cov-append --cov-report=xml --cov-report=term-missing

    - name: Run linting
      run: |
        source .venv/bin/activate
        ruff check backend/
        ruff format --check backend/

    - name: Run type checking
      run: |
        source .venv/bin/activate
        ty check backend/ || echo "Type checking completed with warnings"

    - name: Upload backend coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: backend
        name: backend-coverage

  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci

    - name: Run frontend unit tests
      run: |
        cd frontend
        npm test -- --coverage --watchAll=false --testPathPattern="__tests__/components"

    - name: Run frontend integration tests
      run: |
        cd frontend
        npm test -- --coverage --watchAll=false --testPathPattern="__tests__/integration"

    - name: Build frontend
      run: |
        cd frontend
        npm run build
      env:
        REACT_APP_API_URL: ${{ secrets.REACT_APP_API_URL || 'https://open-ear-trainer-production.up.railway.app' }}

    - name: Upload frontend coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./frontend/coverage/lcov.info
        flags: frontend
        name: frontend-coverage

  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install uv
      run: pip install uv

    - name: Install Python dependencies
      run: |
        uv venv
        source .venv/bin/activate
        uv pip install -e ".[dev]"

    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci

    - name: Install Playwright
      run: |
        cd e2e
        npm install
        npx playwright install --with-deps

    - name: Build frontend for E2E
      run: |
        cd frontend
        npm run build
      env:
        REACT_APP_API_URL: http://localhost:8000

    - name: Run E2E tests
      run: |
        cd e2e
        npx playwright test
      env:
        CI: true

    - name: Upload E2E test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: playwright-report
        path: e2e/playwright-report/
        retention-days: 30

  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install uv
      run: pip install uv

    - name: Install Python dependencies
      run: |
        uv venv
        source .venv/bin/activate
        uv pip install -e ".[dev]"

    - name: Run performance tests
      run: |
        source .venv/bin/activate
        DJANGO_SETTINGS_MODULE=config.settings.test pytest backend/tests/performance/ -v -m "not slow"

    - name: Run load tests
      run: |
        source .venv/bin/activate
        DJANGO_SETTINGS_MODULE=config.settings.test pytest backend/tests/performance/ -v -m "slow" --timeout=300

  security-tests:
    name: Security Tests
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install uv
      run: pip install uv

    - name: Install Python dependencies
      run: |
        uv venv
        source .venv/bin/activate
        uv pip install -e ".[dev]"
        uv pip install bandit safety

    - name: Run security scan
      run: |
        source .venv/bin/activate
        bandit -r backend/ -f json -o bandit-report.json || true
        safety check --json --output safety-report.json || true

    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json
        retention-days: 30

  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, e2e-tests, performance-tests, security-tests]
    if: always()

    steps:
    - name: Check backend tests
      run: |
        if [ "${{ needs.backend-tests.result }}" != "success" ]; then
          echo "‚ùå Backend tests failed"
          exit 1
        else
          echo "‚úÖ Backend tests passed"
        fi

    - name: Check frontend tests
      run: |
        if [ "${{ needs.frontend-tests.result }}" != "success" ]; then
          echo "‚ùå Frontend tests failed"
          exit 1
        else
          echo "‚úÖ Frontend tests passed"
        fi

    - name: Check E2E tests
      run: |
        if [ "${{ needs.e2e-tests.result }}" != "success" ]; then
          echo "‚ùå E2E tests failed"
          exit 1
        else
          echo "‚úÖ E2E tests passed"
        fi

    - name: Check performance tests
      run: |
        if [ "${{ needs.performance-tests.result }}" != "success" ]; then
          echo "‚ùå Performance tests failed"
          exit 1
        else
          echo "‚úÖ Performance tests passed"
        fi

    - name: Check security tests
      run: |
        if [ "${{ needs.security-tests.result }}" != "success" ]; then
          echo "‚ùå Security tests failed"
          exit 1
        else
          echo "‚úÖ Security tests passed"
        fi

    - name: All tests passed
      run: |
        echo "üéâ All tests passed successfully!"
        echo "Backend: ${{ needs.backend-tests.result }}"
        echo "Frontend: ${{ needs.frontend-tests.result }}"
        echo "E2E: ${{ needs.e2e-tests.result }}"
        echo "Performance: ${{ needs.performance-tests.result }}"
        echo "Security: ${{ needs.security-tests.result }}"
